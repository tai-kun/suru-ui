@layer sui.enabled {
  @scope (.SuiTextField) {
    :scope {
      /*
       * Root
       * --SuiTextField-px
       * --SuiTextField-gap
       * --SuiTextField-size
       * --SuiTextField-canvas
       * --SuiTextField-ringColor
       * --SuiTextField-ringWidth
       */

      width: auto;
      height: var(--SuiTextField-size);
      display: inline-flex;
      outline:
        var(--SuiTextField-ringColor)
        solid
        var(--SuiTextField-ringWidth, var(--sui-ring-input));
      background: var(--SuiTextField-canvas, var(--sui-color-canvas-main));
      align-items: center;
      border-radius: var(--sui-radius-md);
      outline-offset: calc(var(--SuiTextField-ringWidth) * -1);

      &.Sui-color-brand   { --SuiTextField-ringColor: var(--sui-color-brand-ring-lc);   }
      &.Sui-color-neutral { --SuiTextField-ringColor: var(--sui-color-neutral-ring-lc); }

      &:has(.SuiTextFieldInput:focus) {
        --SuiTextField-ringColor: var(--sui-ring-focus-color);
        --SuiTextField-ringWidth: var(--sui-ring-focus-active);
      }

      &:has(.SuiTextFieldInput:not(:focus):is([aria-invalid=true], :user-invalid)) {
        --SuiTextField-ringColor: var(--sui-color-error-ring-lc);
      }

      &.Sui-size-sm {
        --SuiTextField-px: var(--sui-space-sm);
        --SuiTextField-gap: var(--sui-space-sm);
        --SuiTextField-size: var(--sui-size-sm);
      }

      &.Sui-size-md {
        --SuiTextField-px: var(--sui-space-md);
        --SuiTextField-gap: var(--sui-space-sm);
        --SuiTextField-size: var(--sui-size-md);
      }

      &.Sui-fullWidth {
        flex: 1;
        width: 100%;
      }

      /*
       * Input
       * --SuiTextFieldInput-size
       * --SuiTextFieldInput-color
       * --SuiTextFieldInput-weight
       * --SuiTextFieldInput-leading
       * --SuiTextFieldInput-trailing
       */

      .SuiTextFieldInput {
        flex: 1;
        color: var(--SuiTextFieldInput-color, var(--sui-color-text-body));
        width: min(100%, 16em);
        cursor: text;
        height: 100%;
        display: block;
        font-size: var(--SuiTextFieldInput-size);
        min-width: 1em;
        text-align: left;
        font-weight: var(--SuiTextFieldInput-weight);
        line-height: var(--SuiTextFieldInput-leading);
        border-radius: inherit;
        letter-spacing: var(--SuiTextFieldInput-tracking);
      }

      &.Sui-size-sm .SuiTextFieldInput {
        --SuiTextFieldInput-size: var(--sui-text-sm-size);
        --SuiTextFieldInput-weight: var(--sui-text-sm-weight);
        --SuiTextFieldInput-leading: var(--sui-text-sm-leading);
        --SuiTextFieldInput-tracking: var(--sui-text-sm-tracking);
      }

      &.Sui-size-md .SuiTextFieldInput {
        --SuiTextFieldInput-size: var(--sui-text-md-size);
        --SuiTextFieldInput-weight: var(--sui-text-md-weight);
        --SuiTextFieldInput-leading: var(--sui-text-md-leading);
        --SuiTextFieldInput-tracking: var(--sui-text-md-tracking);
      }

      &.Sui-fullWidth .SuiTextFieldInput {
        width: 100%;
      }

      /*
       * Adornment
       * --SuiTextFieldAdornment-size
       * --SuiTextFieldAdornment-color
       * --SuiTextFieldAdornment-weight
       * --SuiTextFieldAdornment-leading
       * --SuiTextFieldAdornment-trailing
       */

      .SuiTextFieldAdornment {
        color: var(--SuiTextFieldAdornment-color, var(--sui-color-text-description));
        width: auto;
        height: 100%;
        display: inline-grid;
        font-size: var(--SuiTextFieldAdornment-size);
        font-weight: var(--SuiTextFieldAdornment-weight);
        line-height: var(--SuiTextFieldAdornment-leading);
        place-items: center;
        letter-spacing: var(--SuiTextFieldAdornment-tracking);

        &:not(.Sui-noFocusSteal) {
          cursor: text;
          user-select: none;
        }
      }

      &.Sui-size-sm .SuiTextFieldAdornment {
        --SuiTextFieldAdornment-size: var(--sui-text-sm-size);
        --SuiTextFieldAdornment-weight: var(--sui-text-sm-weight);
        --SuiTextFieldAdornment-leading: var(--sui-text-sm-leading);
        --SuiTextFieldAdornment-tracking: var(--sui-text-sm-tracking);
      }

      &.Sui-size-md .SuiTextFieldAdornment {
        --SuiTextFieldAdornment-size: var(--sui-text-md-size);
        --SuiTextFieldAdornment-weight: var(--sui-text-md-weight);
        --SuiTextFieldAdornment-leading: var(--sui-text-md-leading);
        --SuiTextFieldAdornment-tracking: var(--sui-text-md-tracking);
      }

      /*
       * 空白の実装
       *
       * - デフォルトの Adornment は Input にフォーカスを渡すため、Root 直下の要素に空白を設ける。
       * - .Sui-noFocusSteal が付与されている場合は、
       *   両サイドにフォーカスが盗まれない領域を設けることで、誤フォーカスを防ぐ。
       */

      & .SuiTextFieldInput,
      & .SuiTextFieldAdornment {
        &:first-child {
          padding-left: var(--SuiTextField-px);
        }

        &:last-child {
          padding-right: var(--SuiTextField-px);
        }

        &:not(:last-child).Sui-noFocusSteal {
          padding-right: var(--SuiTextField-gap);
        }

        &:not(.Sui-noFocusSteal) + & {
          padding-left: var(--SuiTextField-gap);
        }
      }
    }
  }
}

@layer sui.disabled {
  @scope (.SuiTextField) {
    :scope:has(.SuiTextFieldInput:is(:disabled, [disabled])) {
      color: var(--sui-color-text-disabled) !important;
      cursor: not-allowed !important;
      outline: currentColor solid var(--sui-ring-disabled) !important;
      background: var(--sui-color-grey-alpha-100) !important;
      user-select: none !important;

      & .SuiTextFieldInput {
        color: currentColor !important;
        user-select: none !important;
        pointer-events: none !important;
      }

      & .SuiTextFieldAdornment {
        color: currentColor !important;
        user-select: none !important;
        pointer-events: none !important;
      }
    }
  }
}
