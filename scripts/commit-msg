#!/usr/bin/env bash

KIND='(chore|docs|feat|fix|perf|refactor|revert|style|test)'
EXCLUDES=('.*' 'build' 'debug' 'dist' 'node_modules' 'out' 'src' 'target')

function listup() {
    local dir="$1"
    local pfx=''
    local max=4
    local abs=false
    local OPT
    local find_opt

    shift

    while getopts "p:m:a" OPT; do
        case "$OPT" in
        p) pfx="$OPTARG" ;;
        m) max="$OPTARG" ;;
        a) abs=true ;;
        *) exit 1 ;;
        esac
    done

    find_opt="-mindepth 1 -maxdepth $max -type d"

    for EXD in "${EXCLUDES[@]}"; do
        find_opt+=" ! \\( -name '$EXD' -o -path '*/$EXD/*' \\)"
    done

    if [ $abs = true ]; then
        eval find "$dir" "$find_opt" | sed 's|[@#]||g' | paste -sd '|'
    else
        (cd "$dir" && eval find . "$find_opt" | sed 's|[@#]||g' | sed "s|^./|$pfx|" | paste -sd '|')
    fi
}

function joint() {
    local str=''
    local i

    for i in "$@"; do
        if [ "$i" != '' ]; then
            if [ "$str" = '' ]; then
                str="$i"
            else
                str="$str|$i"
            fi
        fi
    done

    if [ "$str" = '' ]; then
        echo ''
    else
        echo "($str)"
    fi
}

MSG="$1"

function regex() {
    [[ "$(echo -n "$MSG" | grep -oP "$1")" != '' ]]
}

function check() {
    [ "$1" != '' ] && regex "^$KIND(\(${1//$/\\$}\)): .+$" && exit 0
}

check "$(joint "$(listup . -m 1)")"
check "$(joint "$(listup src)")"
regex "^$KIND: .+$" && exit 0
regex "^chore\((deps|deps-dev)\): .+$" && exit 0

echo 'Invalid commit message format.'
exit 1
